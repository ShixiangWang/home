<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r on Shixiang Wang | 王诗翔</title>
    <link>/tags/r/</link>
    <description>Recent content in r on Shixiang Wang | 王诗翔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>解决R包Check汇报&#39;marked UTF-8 strings&#39;问题</title>
      <link>/cn/post/2021-03-24-solve-marked-utf8-issue-in-r-package-check/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2021-03-24-solve-marked-utf8-issue-in-r-package-check/</guid>
      <description>今天在处理 UCSCXenaShiny 的 R 包 check 时发现报出 Note: found 162 marked UTF-8 strings 这种字符串编码问题（具体 action 报告）。 ❯ checking installed package size ... NOTE installed size is 6.1Mb sub-directories of 1Mb or more: doc 1.7Mb shinyapp 3.2Mb ❯ checking data for non-ASCII characters ... NOTE Note: found 162 marked</description>
    </item>
    
    <item>
      <title>ggplot 图 P 值格式化</title>
      <link>/cn/post/2021-03-08-format-p-value-for-ggplot/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2021-03-08-format-p-value-for-ggplot/</guid>
      <description>ggpubr 包中的 stat_compare_means() 函数是非常常用于对 ggplot 图形添加统计比较结果的方法，近期有粉丝问到了如何对其展示的 P 值进行格式化，这里简要地做一个记录。 这里我们直接使</description>
    </item>
    
    <item>
      <title>RStudio v1.4 正式发布，有哪些新特性？</title>
      <link>/cn/post/2021-01-20-rstudio-v1_4/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2021-01-20-rstudio-v1_4/</guid>
      <description>RStudio 团队昨天正式发布了新的版本 v1.4。 本次更新引入了非常多新的特性： 可视化 Markdown 编辑器支持。A visual markdown editor that provides improved productivity for composing longer-form articles and analyses with R Markdown. 新的 Python 支持能力。 New</description>
    </item>
    
    <item>
      <title>tidyverse 中的公式函数</title>
      <link>/cn/post/2020-12-28-formula-func-in-tidyverse/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-12-28-formula-func-in-tidyverse/</guid>
      <description>本文的写作由来是知识星球一个朋友对如何在 tidyverse 系列包中使用公式函数（单侧公式）不太熟悉，所以通过本文分享一下我的心得。 构造数据 本文为了聚焦于公式</description>
    </item>
    
    <item>
      <title>Hiplot Xena 镜像与官方网站下载速度测评</title>
      <link>/cn/post/2020-12-14-test-download-speed-with-hiplot-ucsc-xena-mirror/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-12-14-test-download-speed-with-hiplot-ucsc-xena-mirror/</guid>
      <description>最近剑峰在 Hiplot 服务器上线了 UCSC Xena 的镜像，本文是对已部署镜像的下载速度情况进行一个简单的测评。 数据集选择 使用更新到 1.4.0 的 UCSCXenaTools https://githu</description>
    </item>
    
    <item>
      <title>安装 R 源码包时踩过的坑</title>
      <link>/cn/post/2020-12-04-set-makevars-when-install-source-pkg/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-12-04-set-makevars-when-install-source-pkg/</guid>
      <description>这两天在课题组服务器上安装微软的 R 版本，然后又操作了一波从头开始软件安装，遭遇了几个常见的几个坑。例如 XML 包和 RCurl 包第一次安装一半都需要提取安装</description>
    </item>
    
    <item>
      <title>unlist() 和 purrr::flatten() 的区别在哪里？</title>
      <link>/cn/post/2020-12-02-difference-between-unlist-and-flatten/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-12-02-difference-between-unlist-and-flatten/</guid>
      <description>最近在工作的时候有一个需求是解除对象的列表结构，但运行后发现 unlist() 并非我想要的只解除一层嵌套。 我们用个非常简单的数据来看这个问题： x &amp;lt;- list(list(a = 1, b =</description>
    </item>
    
    <item>
      <title>使用 wfun 加速 GitHub 包安装和仓库克隆</title>
      <link>/cn/post/2020-11-27-wfun-intro/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-11-27-wfun-intro/</guid>
      <description>在国内下载 GitHub R 包或者克隆仓库经常失败，虽然在 Gitee 上设置镜像是一个不错的办法，但总是这么操作也挺麻烦了。今天分享一个解决的办法，就是使用我新写的</description>
    </item>
    
    <item>
      <title>无影腿快不过组合拳？均值计算哪家强</title>
      <link>/cn/post/2020-11-27-which-is-faster-to-calc-the-mean-in-r/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-11-27-which-is-faster-to-calc-the-mean-in-r/</guid>
      <description>昨天我在公众号推文中提了一个非常有意思的问题：mean() 和 sum() / length() 哪一个更快？ 我在知识星球看到有朋友已经测试过了，发现后者更快，为什么呢？ 性</description>
    </item>
    
    <item>
      <title>CentOS 安装和管理 Shiny Server</title>
      <link>/cn/post/2020-11-24-install-and-manage-shiny-server/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-11-24-install-and-manage-shiny-server/</guid>
      <description>安装 sudo yum install R sudo su - \ -c &amp;#34;R -e \&amp;#34;install.packages(&amp;#39;shiny&amp;#39;, repos=&amp;#39;https://cran.rstudio.com/&amp;#39;)\&amp;#34;&amp;#34; wget -c https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.15.953-x86_64.rpm sudo yum install --nogpgcheck shiny-server-1.5.15.953-x86_64.rpm 管理 文档是 https://docs.rstudio.com/shiny-server/，有经验</description>
    </item>
    
    <item>
      <title>安装 Rmpi 包</title>
      <link>/cn/post/2020-11-23-install-rmpi/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-11-23-install-rmpi/</guid>
      <description>下载包 wget -c https://cran.r-project.org/src/contrib/Rmpi_0.6-9.tar.gz 此处可以换不同的源，最新版本也可能不同。 CentOS 下安装 # 先安装依赖库 sudo yum install openmpi-devel # 安装 # ld -lmpi --verbose R CMD INSTALL Rmpi_0.6-9.tar.gz --configure-args=&amp;#34;--with-Rmpi-include=/usr/include/openmpi-x86_64/ --with-Rmpi-libpath=/usr/lib64/openmpi/lib --with-Rmpi-type=OPENMPI&amp;#34; 如果存在编译问题，查看 http://fisher.stats.uwo.ca/faculty/yu/Rmpi/ 文档看</description>
    </item>
    
    <item>
      <title>dplyr 里的 join 与 base 里的 merge 存在差异</title>
      <link>/cn/post/2020-11-16-difference-between-merge-and-dplyr-join/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-11-16-difference-between-merge-and-dplyr-join/</guid>
      <description>今天在使用连接操作时发现：虽然都是合并操作函数，dplyr 包里的 *_join() 和基础包里面的 merge() 存在差异，不同的数据结构，结果也会存在偏差。 构造数据集 下面</description>
    </item>
    
    <item>
      <title>R 表格可视化 10&#43; 指南</title>
      <link>/cn/post/2020-10-09-table-rules-in-r/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-10-09-table-rules-in-r/</guid>
      <description>原文：https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/ Rmd 本文根据原文</description>
    </item>
    
    <item>
      <title>当使用limma时，它在比较什么</title>
      <link>/cn/post/2020-10-29-what-has-been-done-when-use-limma/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-10-29-what-has-been-done-when-use-limma/</guid>
      <description>差异分析流程示例与资料 基因芯片的差异表达分析主要有 构建基因表达矩阵、构建实验设计矩阵、构建对比模型（对比矩阵）、线性模型拟合、贝叶斯检验和生</description>
    </item>
    
    <item>
      <title>「分享」相关分析</title>
      <link>/cn/post/2020-09-27-share-a-post-about-correlation/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-27-share-a-post-about-correlation/</guid>
      <description>文章链接：Correlations</description>
    </item>
    
    <item>
      <title>一个函数获取 TCGA/CCLE 单基因分子数据</title>
      <link>/cn/post/2020-09-26-access-gene-level-cancer-data-from-ucsc-xena/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-26-access-gene-level-cancer-data-from-ucsc-xena/</guid>
      <description>这篇文章很久之前就想写了，但一直因为一些事情拖延了。 在开发 UCSCXenaShiny 的基础上，我将其中支持的 UCSCXena TCGA/CCLE 单基因数据下载函数进行了整理，构建了一个单一的入口。</description>
    </item>
    
    <item>
      <title>使用 ggplot2 进行曲线拟合</title>
      <link>/cn/post/2020-09-25-fit-scatter-with-lm/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-25-fit-scatter-with-lm/</guid>
      <description>有读者询问如何对散点图拟合非线性的曲线。实际上我们通常看到的无论是直线拟合还是各种曲线拟合都属于广义线性模型。 这里我们构造一组数据来看看如何</description>
    </item>
    
    <item>
      <title>Markdown 和 RMarkdown 最佳入口</title>
      <link>/cn/post/2020-09-23-use-markdown-and-rmarkdown/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-23-use-markdown-and-rmarkdown/</guid>
      <description>特性与用途 简单 结构化-转换 Word PDF HTML &amp;hellip; 多编辑器支持 Typora RStudio Jupyter notebook VS Code &amp;hellip; Markdown 效果（以 Typora 为例） 图片： .img-container { text-align: center; display: block; } 标题： .img-container { text-align: center; display: block; } 列表： .img-container { text-align: center; display: block; } 表</description>
    </item>
    
    <item>
      <title>「分享」R 弹性网络回归四连击</title>
      <link>/cn/post/2020-09-14-share-r-elastic-net-regression/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-14-share-r-elastic-net-regression/</guid>
      <description>这里感谢珠江肿瘤公众号的制作和分享： 正则化(1)：通俗易懂的岭回归 正则化(2)：与岭回归相似的 Lasso 回归 正则化(3)：弹性网络回归 正则化(4)：</description>
    </item>
    
    <item>
      <title>「分享」R 矩阵计算</title>
      <link>/cn/post/2020-09-14-share-r-matrix-operation/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-14-share-r-matrix-operation/</guid>
      <description>内容链接。</description>
    </item>
    
    <item>
      <title>浏览器 R 搜索插件</title>
      <link>/cn/post/2020-09-09-r-search-extension/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-09-r-search-extension/</guid>
      <description>r-search-extension 是一款浏览器插件，它支持搜索 R 文档/问题以及微信平台搜索。它的使用及其简单，在浏览器搜索栏输入 r 然后跟一个空格，接着输入你想要搜索的关键词</description>
    </item>
    
    <item>
      <title>Rcpp 简介：从 R 到 Rcpp</title>
      <link>/cn/post/2020-09-08-rcpp-intro/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-08-rcpp-intro/</guid>
      <description>参考图书：《Rcpp：R 与 C++ 的无缝整合》 Rcpp 的主要目的在于使得开发 R 语言的 C++ 相关拓展变得更加容易、更少出错。 我们首先从斐波那契数列问题开始探索</description>
    </item>
    
    <item>
      <title>绘制分组排序点图</title>
      <link>/cn/post/2020-09-04-use-grdotplot/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-09-04-use-grdotplot/</guid>
      <description>我在看过的一些 Nature 文章和 COSMIC 数据库中看到用点图来展示不同癌症类型下 TMB 的分布差异。在 R 包中，我有看到过 maftools 中可以绘制这样的图，用来表示新的数据队列与</description>
    </item>
    
    <item>
      <title>使用 tinyscholar 展示个人谷歌学术档案</title>
      <link>/cn/post/2020-08-16-show-scholar-profile-with-r-tinyscholar/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-08-16-show-scholar-profile-with-r-tinyscholar/</guid>
      <description>谷歌学术是目前感觉最好的学术搜索引擎，谷歌学术档案提供了学者的个人学术信息，不过通常情况我们无法查看和使用这个信息。Y 叔写的 scholar 包虽然提供了齐</description>
    </item>
    
    <item>
      <title>Rprofile：R 全局设置</title>
      <link>/cn/post/2020-08-13-set-your-rprofile/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-08-13-set-your-rprofile/</guid>
      <description>存储在 ~/.Rprofile 中的内容是一个 R 脚本，它会在 R 启动时自动运行，所以可以作为全局的配置使用。 根据我的 R 使用经验，结合 Y 叔和 Yihui 提供的一些便利函数，我构建</description>
    </item>
    
    <item>
      <title>UCSCXenaTools: Download Public Cancer Genomic Data from UCSC Xena Hubs</title>
      <link>/en/tools/ucscxenatools-intro/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/tools/ucscxenatools-intro/</guid>
      <description>UCSCXenaTools is an R package for downloading and exploring data from UCSC Xena data hubs, which are
 a collection of UCSC-hosted public databases such as TCGA, ICGC, TARGET, GTEx, CCLE, and others. Databases are normalized so they can be combined, linked, filtered, explored and downloaded.
– UCSC Xena
 If you use this package in academic field, please cite:
Wang, Shixiang, et al. &amp;quot;The predictive power of tumor mutational burden in lung cancer immunotherapy response is influenced by patients&amp;#39; sex.</description>
    </item>
    
    <item>
      <title>UCSCXenaTools: R API for UCSC Xena Hubs</title>
      <link>/en/tools/ucscxenatools-api/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/tools/ucscxenatools-api/</guid>
      <description>This vignette gives users the summary information of API functions provided by UCSCXenaTools for UCSC Xena.
Before using API, user should know some concepts about Xena elements. Following description is copied from xenaPython __init__.py.
 Data rows are associated with “sample” IDs.
Sample IDs are unique within a “cohort”. s A “dataset” is a particular assay of a cohort, e.g. gene expression.
Datasets have associated metadata, specifying their data type and cohort.</description>
    </item>
    
    <item>
      <title>Obtain RNAseq Values for a Specific Gene in Xena Database</title>
      <link>/en/post/2020-07-22-ucscxenatools-single-gene/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/post/2020-07-22-ucscxenatools-single-gene/</guid>
      <description>When using UCSCXenaTools package, you may want to focus on single gene analysis, a typical case has been shown in my previous blog UCSCXenaTools: Retrieve Gene Expression and Clinical Information from UCSC Xena for Survival Analysis. Here I will describe how to get single gene values (especially RNAseq data) in details. Let’s load package. library(UCSCXenaTools) #&amp;gt; ========================================================================================= #&amp;gt; UCSCXenaTools version 1.3.3 #&amp;gt; Project URL: https://github.com/ropensci/UCSCXenaTools #&amp;gt;</description>
    </item>
    
    <item>
      <title>使用 sigminer 进行突变模式分析</title>
      <link>/cn/post/2020-06-07-mutational-signature-analysis-with-sigminer/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-06-07-mutational-signature-analysis-with-sigminer/</guid>
      <description>突变模式分析（Mutational Signature Analysis）已经逐步成为变异检测后一个通用分析，这篇文章简单介绍如何使用 sigminer 进行突变模式分析，以解决</description>
    </item>
    
    <item>
      <title>事实不等于标签：关于真假 png 的找 bug 记录</title>
      <link>/cn/post/2020-05-11-true-and-false-png/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-05-11-true-and-false-png/</guid>
      <description>这是针对今天找 bug 的记录。 我在日常更改 sigminer 手册后使用 knitr 生成网页文档时发现一直报错： Quitting from lines 42-43 (sigminer-doc.Rmd) Error in png::readPNG(path, native = TRUE, info = TRUE) : file is not in PNG format 这个报错源自于我使用</description>
    </item>
    
    <item>
      <title>ezcox 森林图中点估计方块大小设定</title>
      <link>/cn/post/2020-05-02-ezcox-forest-set-square-size/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-05-02-ezcox-forest-set-square-size/</guid>
      <description>这篇文章与 https://github.com/ShixiangWang/MessageBoard/issues/69 与 https://github.com/ShixiangWang/ezcox/issues/12 相关。 之前开发的 ezcox 包提供了批量建模和展示森林图的功能，我自认为森林图要比 ggpubr 提供的 ggforest 好看。森林图的绘制实际是基于 forestmodel 的实现。 forestmodel 一</description>
    </item>
    
    <item>
      <title>模型结果为什么那么占存储空间？可以缩小吗？</title>
      <link>/cn/post/2020-04-24-can-delete-data-in-model/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-04-24-can-delete-data-in-model/</guid>
      <description>在使用 R 处理逻辑回归建模问题时发现保存的模型对象非常之大，不可思议。正常情况下，我们建模之后所需要的就是模型的系数，以此对新的数据进行预测。</description>
    </item>
    
    <item>
      <title>do.call 妙用——参数更新</title>
      <link>/cn/post/2020-04-21-benefit-from-do-call/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-04-21-benefit-from-do-call/</guid>
      <description>R 中的 do.call() 是我极少用到的一个函数，不过它在很多情况下是蛮有用的，之前我也做过简单的介绍。 它可以在实际调用函数时将参数以列表的形式传入，下面是一</description>
    </item>
    
    <item>
      <title>使用 ezcox 展示森林图</title>
      <link>/cn/post/2020-01-13-show-forest-with-ezcox/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-01-13-show-forest-with-ezcox/</guid>
      <description>我之前写过一篇文章介绍最近写的一个包 ezcox，它可以用来进行批量处理 Cox 模型（支持并行计算）。那个时候我已经关注到了 forestmodel 包并修复了几个 Bug，</description>
    </item>
    
    <item>
      <title>2019 年度总结</title>
      <link>/cn/post/2020-01-01-2019-summary/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2020-01-01-2019-summary/</guid>
      <description>2019 年过去了，我把自己的 GitHub 仓库清理了一遍，总结过去一年自己的收获和思考。 参与发表的文献 2019 年我参与发表了 5 篇科学文献，其中 4 篇 SCI，另 1 篇是我</description>
    </item>
    
    <item>
      <title>R 语言统计检验函数汇总</title>
      <link>/cn/post/2019-12-25-r-stats-funs-summary/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-12-25-r-stats-funs-summary/</guid>
      <description>资料来源：《R 语言核心技术手册》和 R 文档 数据基本来自胡编乱造 和 R 文档 本文基本囊括了常用的统计检验在 R 中的实现函数和使用方法。 连续型数据 基于正</description>
    </item>
    
    <item>
      <title>使用 ezcox 进行批量 Cox 模型处理</title>
      <link>/cn/post/2019-10-23-ezcox-for-batch-cox-models/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-10-23-ezcox-for-batch-cox-models/</guid>
      <description>Cox 模型是我们做生存分析最常用的模型，在实际的分析工作中，我们常常想逐一查看多个变量对生存时间的影响。注意，这与多变量分析不同，后者是通常将多</description>
    </item>
    
    <item>
      <title>使用 Cascadia Code 字体</title>
      <link>/cn/post/2019-10-18-use-cascadia-code-font/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-10-18-use-cascadia-code-font/</guid>
      <description>最近微软为 Windows Terminal 推出了具有连字特性的字体 Cascadia Code，在试用后发现确实很不错，下图是字体效果，这里结合官方的 README 介绍一下。 .img-container { text-align: center; display: block; } .img-container { text-align: center; display:</description>
    </item>
    
    <item>
      <title>简单丰富的ROC绘制与对比</title>
      <link>/cn/post/2019-10-18-proc-for-roc-comparison/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-10-18-proc-for-roc-comparison/</guid>
      <description>我之前在《分析与可视化ROC——plotROC、pROC》中介绍了两个包 plotROC 和 pROC，那是一年前的事情了，现在我在处理 ROC 曲线时使用的是什么呢</description>
    </item>
    
    <item>
      <title>使用有限混合模型</title>
      <link>/cn/post/2019-09-06-flexmix-model/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-09-06-flexmix-model/</guid>
      <description>模拟数据 library(ggplot2) library(flexmix) #&amp;gt; Loading required package: lattice m1 &amp;lt;- 0 m2 &amp;lt;- 50 sd1 &amp;lt;- sd2 &amp;lt;- 5 N1 &amp;lt;- 100 N2 &amp;lt;- 10 a &amp;lt;- rnorm(n=N1, mean=m1, sd=sd1) b &amp;lt;- rnorm(n=N2, mean=m2, sd=sd2) 绘制数据图形 x &amp;lt;- c(a,b) class &amp;lt;- c(rep(&amp;#39;a&amp;#39;, N1), rep(&amp;#39;b&amp;#39;, N2)) data &amp;lt;- data.frame(cbind(x=as.numeric(x), class=as.factor(class))) library(&amp;quot;ggplot2&amp;quot;) p &amp;lt;- ggplot(data, aes(x = x)) + geom_histogram(aes(x, ..density..), binwidth = 1,</description>
    </item>
    
    <item>
      <title>UCSCXenaTools: Retrieve Gene Expression and Clinical Information from UCSC Xena for Survival Analysis</title>
      <link>/en/post/ucscxenatools-201908/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/post/ucscxenatools-201908/</guid>
      <description>I thank the edition made by Stefanie Butland.
 The UCSC Xena platform provides an unprecedented resource for public omics data from big projects like The Cancer Genome Atlas (TCGA), however, it is hard for users to incorporate multiple datasets or data types, integrate the selected data with popular analysis tools or homebrewed code, and reproduce analysis procedures. To address this issue, we developed an R package UCSCXenaTools for enabling data retrieval, analysis integration and reproducible research for omics data from the UCSC Xena platform1.</description>
    </item>
    
    <item>
      <title>读入 dbGap 的表型/注释信息</title>
      <link>/cn/post/2019-08-23-read-dbgap-subjects-samples-info/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-08-23-read-dbgap-subjects-samples-info/</guid>
      <description>dbGaP 表型等信息零散地却有规律地分布在 files/ 目录下，为了理解哪些文件存储了数据，我对下载的文件类型进行了查看，包括 xml, pdf 以及 gz 文件。大致有以下整理： pdf</description>
    </item>
    
    <item>
      <title>使用RMySQL简单操作mysql数据库</title>
      <link>/cn/post/2019-08-22-using-rmysql/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-08-22-using-rmysql/</guid>
      <description>使用 MySQL 数据库创建一个用于存储用户信息的数据表：包含 username, email, password 三个字段，并分别使用 SQL 和 Python/R 客户端插入、删除和更新一行数据，密码使用 SHA256 进行加密 library(RMySQL) con = dbConnect(MySQL(),</description>
    </item>
    
    <item>
      <title>可视化 deft 方法进行的 subgroup 分析结果</title>
      <link>/cn/post/2019-08-22-metawho-add-deft-show-fun/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-08-22-metawho-add-deft-show-fun/</guid>
      <description>在文章《谁更能从治疗中获益？》中我讲过 metawho 包的开发由来，但当时遗留了一个问题，就是如何可视化 deft 元分析方法的结果。 之前我提供了使用 metafor 包绘制结果的</description>
    </item>
    
    <item>
      <title>引用UCSCXenaTools</title>
      <link>/cn/post/2019-08-07-cite-ucscxenatools/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-08-07-cite-ucscxenatools/</guid>
      <description>UCSCXenaTools &amp;lt;https://github.com/ropensci/UCSCXenaTools&amp;gt; 是去年10月份左右开始开发的，是我写的第一个R包，目的是有效地选择和下载UCSC Xena提供的公开数据集，有利于分析的流程化和可重复性。</description>
    </item>
    
    <item>
      <title>ggplotify——连接各类R图形</title>
      <link>/cn/post/2019-08-05-ggplotify-intro/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-08-05-ggplotify-intro/</guid>
      <description>在作图的时候想拼接不同的图形对象，如pheatmap 包的热图、ggplot2 对象以及 base 图形等。 这里找到了Y叔的ggplotify包，以下是对</description>
    </item>
    
    <item>
      <title>tidyverse 新操作符{{}}——更好的非标准计算</title>
      <link>/cn/post/2019-08-04-rlang-operator-curly-curly/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-08-04-rlang-operator-curly-curly/</guid>
      <description>本文整理自 https://www.tidyverse.org/articles/2019/06/rlang-0-4-0/，有删改 rlang v0.4.</description>
    </item>
    
    <item>
      <title>contribution - A Tiny Contribution Table Generator Based on ggplot2</title>
      <link>/en/tools/contribution-table/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/tools/contribution-table/</guid>
      <description>The goal of contribution is to generate contribution table for credit assignment in a project. This is inspired by Nick Steinmetz (see twitter https://twitter.com/SteinmetzNeuro/status/1147241138291527681). Authors contributions sections are new and still don’t appear in major journals, but can be improved. Rather than text listing each author’s contributions, the same data can be presented as a table with rows corresponding</description>
    </item>
    
    <item>
      <title>dplyr编程</title>
      <link>/cn/post/2019-07-08-dplyr-programming/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-07-08-dplyr-programming/</guid>
      <description>本文首先发布于简书，本人在对相关知识有进一步理解后对本文进行修改，以便于中文更好地理解。 来源：vignettes/programming.R</description>
    </item>
    
    <item>
      <title>管道统计分析——rstatix使用指南</title>
      <link>/cn/post/2019-07-07-use-rstatix/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-07-07-use-rstatix/</guid>
      <description>原英文文档地址：https://raw.githubusercontent.com/kassambara/rstatix/master/RE</description>
    </item>
    
    <item>
      <title>R传统图形绘制多图</title>
      <link>/cn/post/2019-06-21-baseplot-multiplots/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-06-21-baseplot-multiplots/</guid>
      <description>我这里只说 2 种常用方式，它们互相排斥： 使用 par() 函数设定 mfrow 或者 mfcol 进行控制。 使用 layout() 函数。 par() 函数 mfrow 和 mfcol 都由 2 个数字指定，一个表示行数、一个表示列数。</description>
    </item>
    
    <item>
      <title>R基本绘图：创建与添加图形</title>
      <link>/cn/post/2019-06-21-baseplot-addplot/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-06-21-baseplot-addplot/</guid>
      <description>R 遵循画家模式。 高级绘图函数 + 低级绘图函数才能让图形丰富多样起来。 基本的低级绘图函数 Table 1: &amp;lt;U+5E38&amp;gt;&amp;lt;U+89C1&amp;gt;&amp;lt;U+57FA&amp;gt;&amp;lt;U+672C&amp;gt;&amp;lt;U+4F4E&amp;gt;&amp;lt;U+7EA7&amp;gt;&amp;lt;U+7ED8&amp;gt;&amp;lt;U+56FE&amp;gt;&amp;lt;U+51FD&amp;gt;&amp;lt;U+6570&amp;gt; &amp;lt;U+51FD&amp;gt;&amp;lt;U+6570&amp;gt; &amp;lt;U+63CF&amp;gt;&amp;lt;U+8FF0&amp;gt; points() &amp;lt;U+6570&amp;gt;&amp;lt;U+636E&amp;gt;&amp;lt;U+7B26&amp;gt;&amp;lt;U+53F7&amp;gt; lines() &amp;lt;U+7EBF&amp;gt;&amp;lt;U+6761&amp;gt; segments() &amp;lt;U+7EBF&amp;gt;&amp;lt;U+6BB5&amp;gt; arrows() &amp;lt;U+7BAD&amp;gt;&amp;lt;U+5934&amp;gt; xspline() &amp;lt;U+5149&amp;gt;&amp;lt;U+6ED1&amp;gt;&amp;lt;U+66F2&amp;gt;&amp;lt;U+7EBF&amp;gt; rect() &amp;lt;U+77E9&amp;gt;&amp;lt;U+5F62&amp;gt; polygon() &amp;lt;U+591A&amp;gt;&amp;lt;U+8FB9&amp;gt;&amp;lt;U+5F62&amp;gt; polypath() &amp;lt;U+591A&amp;gt;&amp;lt;U+8FB9&amp;gt;&amp;lt;U+5F62&amp;gt;&amp;lt;U+8DEF&amp;gt;&amp;lt;U+5F84&amp;gt; rasterImage() &amp;lt;U+4F4D&amp;gt;&amp;lt;U+56FE&amp;gt;&amp;lt;U+FF08&amp;gt;&amp;lt;U+5728&amp;gt;&amp;lt;U+56FE&amp;gt;&amp;lt;U+5F62&amp;gt;&amp;lt;U+4E0A&amp;gt;&amp;lt;U+53EF&amp;gt;&amp;lt;U+4EE5&amp;gt;&amp;lt;U+6DFB&amp;gt;&amp;lt;U+52A0&amp;gt;&amp;lt;U+5916&amp;gt;&amp;lt;U+90E8&amp;gt;&amp;lt;U+56FE&amp;gt;&amp;lt;U+7247&amp;gt;&amp;lt;U+FF09&amp;gt; text() &amp;lt;U+6587&amp;gt;&amp;lt;U+672C&amp;gt; 添加图</description>
    </item>
    
    <item>
      <title>Create logo for R package UCSCXenaTools with hexSticker</title>
      <link>/en/post/2019-06-20-how-i-create-ucscxenatools-logo/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/post/2019-06-20-how-i-create-ucscxenatools-logo/</guid>
      <description>A few days ago, I asked Tyler about how did he create the logo of R package exoplanets.
 Figure 1: logo of R package exoplanets  I really love this logo because it is very simple and elegant.
He told me he used a software called omnigraffle to make the logos. I tried learning this software and still did not know how to use it to create a nice logo because I am not good at creating beautiful things.</description>
    </item>
    
    <item>
      <title>使用NMF包绘制热图</title>
      <link>/cn/post/use-nmf-aheatmap/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/use-nmf-aheatmap/</guid>
      <description>学习文档:https://cran.r-project.org/web/packages/NMF/vignettes/heatmaps.pd</description>
    </item>
    
    <item>
      <title>图形沟通：ggplot2</title>
      <link>/cn/post/communicate-with-ggplot2/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/communicate-with-ggplot2/</guid>
      <description>准备工作 library(tidyverse) #&amp;gt; ── Attaching packages ────────────────────────────────────────────────────────────</description>
    </item>
    
    <item>
      <title>使用purrr和broom处理多个模型</title>
      <link>/cn/post/purrr-and-broom/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/purrr-and-broom/</guid>
      <description>整理自《R for data science》 本文介绍3种方法用于处理大量模型。 使用多个简单模型更好地理解复杂数据集。 使用列表列在数据框中保存任意数据结构。</description>
    </item>
    
    <item>
      <title>modelr——基础模型实现</title>
      <link>/cn/post/modelr-base-models/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/modelr-base-models/</guid>
      <description>建立模型的目的是提供一个简单的、低纬度的数据集摘要。我们使用模型的目的是将数据划分为模式和残差，借助模型探索数据集，拨开覆盖在数据集结构上的</description>
    </item>
    
    <item>
      <title>用purrr实现迭代</title>
      <link>/cn/post/purrr-loop/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/purrr-loop/</guid>
      <description>函数有3个好处： 更容易看清代码意图 更容易对需求变化做出反应（改变） 更容易减少程序bug 除了函数，减少重复代码的另一种工具是迭代，它的作用在于</description>
    </item>
    
    <item>
      <title>模型预测与置信区间</title>
      <link>/cn/post/linear-model-prediction/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/linear-model-prediction/</guid>
      <description>线性回归的主要目的是根据一个或多个预测变量（自变量）预测一个结果值。本文会讨论如何使用R来预测新观测值的结果。你也将学习如何展示置信区间和预</description>
    </item>
    
    <item>
      <title>showtext：在R图里面更简单地使用字体</title>
      <link>/cn/post/showtext-pkg/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/showtext-pkg/</guid>
      <description>在如何修改画图使用的字体这篇文章中，我介绍了一种解决R图里字体的方案——extrafont包。今天意外看到另一个解决字体问题的包，再次推荐和</description>
    </item>
    
    <item>
      <title>R-网页爬虫：分析HTML代码</title>
      <link>/cn/post/2019-11-20-r-crawler-2/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-crawler-2/</guid>
      <description>前一篇文章我们学习了选择器（CSS和XPath）。 我们可以从https://cran.rstudio.com/web/packages/av</description>
    </item>
    
    <item>
      <title>stringr——处理字符串</title>
      <link>/cn/post/stringr-operation/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/stringr-operation/</guid>
      <description>导入包： library(tidyverse) #&amp;gt; ── Attaching packages ────────────────────────────────────────────────────────────</description>
    </item>
    
    <item>
      <title>R-网页爬虫：初识</title>
      <link>/cn/post/2019-11-20-r-crawler-1/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-crawler-1/</guid>
      <description>数据处理的数据集并非立即可得，有时我们需要自己收集�数据，对很多研究领域，网页内容是一个重要的数据源。 查阅网页内容 下面是一个简单的网页，几乎</description>
    </item>
    
    <item>
      <title>Forest Plot（森林图）绘制</title>
      <link>/cn/post/use-forestplot/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/use-forestplot/</guid>
      <description>森林图常见于元分析，但其使用绝不仅如此，比如我现在想要研究的对象有诸多HR结果，我想要汇总为一张图，森林图就是个非常好的选择。ggpubr包</description>
    </item>
    
    <item>
      <title>使用shinydashboard</title>
      <link>/cn/post/use-shinydashboard/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/use-shinydashboard/</guid>
      <description>除了shiny包，RStudio还开发了一个shinydashboard扩展包，它呈现数据的方式就是专门用于概览或检测数据。 接下来的例子意在</description>
    </item>
    
    <item>
      <title>R 的高性能计算</title>
      <link>/cn/post/hpc-in-r/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/hpc-in-r/</guid>
      <description>《R语言编程指南》 代码性能 简单看函数运行时间，用system.time()函数。 高级点，使用microbenchmark包的microben</description>
    </item>
    
    <item>
      <title>R-数据操作</title>
      <link>/cn/post/2019-11-20-r-hight-level-data-operation/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-hight-level-data-operation/</guid>
      <description>本文内容： 基础函数操作数据框 sqldf包使用SQL查询数据框 data.table包操作数据 dplyr管道操作处理数据 rlist包处理嵌套数据</description>
    </item>
    
    <item>
      <title>R-操作数据库</title>
      <link>/cn/post/2019-11-20-r-operate-database/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-operate-database/</guid>
      <description>在阅读之前我有必要进行申明,因为使用的是RMD文档,所以每次RENDER的时候都会读取数据库,所以结果显示不一样正常,有的也加了overwr</description>
    </item>
    
    <item>
      <title>R-面向对象编程（二）</title>
      <link>/cn/post/2019-11-20-high-level-oop-two/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-high-level-oop-two/</guid>
      <description>内容： S4 引用类（Reference class, RC） R6扩展包 ## S4对象系统 在S3之后，R引入一个更正式更严谨的面向对象系统S4。这个系统允许我们使用</description>
    </item>
    
    <item>
      <title>R-面向对象编程（一）</title>
      <link>/cn/post/2019-11-20-high-level-oop-one/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-high-level-oop-one/</guid>
      <description>内容： S3 借助面向对象的编码风格，并加以合理的抽象，我们可以简单地模仿对象的重要特性，于是，问题和模型之间的转换就变得清晰自然。 S3对象 S3对</description>
    </item>
    
    <item>
      <title>字符串操作</title>
      <link>/cn/post/2019-11-20-operate-string/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-operate-string/</guid>
      <description>打印 &amp;quot;Hello world!&amp;quot; #&amp;gt; [1] &amp;quot;Hello world!&amp;quot; print(&amp;quot;Hello world!&amp;quot;) #&amp;gt; [1] &amp;quot;Hello world!&amp;quot; 不带索引 cat(&amp;quot;Hello world!&amp;quot;) #&amp;gt; Hello world! message(&amp;quot;Hello world!&amp;quot;) #&amp;gt; Hello world! 连接 paste(&amp;quot;Hello&amp;quot;, &amp;quot;world!&amp;quot;) #&amp;gt; [1] &amp;quot;Hello world!&amp;quot; paste(&amp;quot;Hello&amp;quot;, &amp;quot;world&amp;quot;, sep = &amp;quot;-&amp;quot;) #&amp;gt; [1] &amp;quot;Hello-world&amp;quot; paste0(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;) #&amp;gt; [1] &amp;quot;HelloWorld&amp;quot; paste(c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;), c(1,2)) #&amp;gt; [1] &amp;quot;A 1&amp;quot; &amp;quot;B 2&amp;quot; paste(c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;), c(1,2), collapse = &amp;quot;,&amp;quot;, sep = &amp;quot;&amp;quot;) #&amp;gt; [1] &amp;quot;A1,B2&amp;quot;</description>
    </item>
    
    <item>
      <title>R的安装与配置</title>
      <link>/cn/post/2018-08-10-r-installation/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2018-08-10-r-installation/</guid>
      <description>Windows R安装好后配置是本文的重点。关于Windows R的安装，百度有一大堆的教程。其中重点有3： 安装R，下载https://mirrors.tu</description>
    </item>
    
    <item>
      <title>R 的元编程</title>
      <link>/cn/post/2019-11-20-meta-programming/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-meta-programming/</guid>
      <description>内容： 函数式编程：闭包（closures）与高阶函数（higher-order functions） 基于语言计算以及语言对象 非标准计算（non</description>
    </item>
    
    <item>
      <title>R的内部机制</title>
      <link>/cn/post/2019-11-20-r-mechanism/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-mechanism/</guid>
      <description>内容： 惰性求值 （Lazy evaluation） 复制-修改机制 （Copy-on-modify mechanism） 词法作用域 （Lexical sc</description>
    </item>
    
    <item>
      <title>metafor——元分析技术实现</title>
      <link>/cn/post/2019-11-20-use-metafor/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-use-metafor/</guid>
      <description>最近在科研中使用到元分析，零零散散开始接触一些理论与实现。元分析的主要作用就是汇总某一个方面所有符合条件研究的统计结果，评估这个方向研究一个</description>
    </item>
    
    <item>
      <title>拼图包patchwork使用</title>
      <link>/cn/post/2019-11-20-usage-of-patchwork/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-usage-of-patchwork/</guid>
      <description>patchwork是基于ggplot2的拼图包，因为ggplot2本身没有强大的拼图语法，而一般使用的gridExtra与cowplot的拼</description>
    </item>
    
    <item>
      <title>倾向评分匹配算法——R实例学习</title>
      <link>/cn/post/2019-11-20-propensity-score-match/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-propensity-score-match/</guid>
      <description>倾向评分算法用于校正模型中的混淆因子，这里我们先使用随机生成的数据学习该算法，然后实际分析一下去教会学校和公共学校上学学生的成绩差异。 本文主</description>
    </item>
    
    <item>
      <title>使用apply函数簇</title>
      <link>/cn/post/2019-11-20-use-apply-family/</link>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-use-apply-family/</guid>
      <description>在实际使用R时，for循环往往是最后的选择。一般每次循环计算都是独立的，所以我们可以使用更简洁更方便的读写方式来实现同样的效果。 举例，如果使</description>
    </item>
    
    <item>
      <title>do.call的使用</title>
      <link>/cn/post/usage-of-docall/</link>
      <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/usage-of-docall/</guid>
      <description>学习下R中一个有趣地函数，do.call。 do.call这个函数是我在搜索问题时会看到别人经常使用的一个函数，心生好奇，这次来看看它的用法。</description>
    </item>
    
    <item>
      <title>使用lattice进行高级绘图</title>
      <link>/cn/post/2019-11-20-intro-to-lattice/</link>
      <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-intro-to-lattice/</guid>
      <description>使用lattice进行高级绘图是我之前在学习《R实战》这本书少有涉及的章节之一，在R里面，主要有两大底层图形系统，一是base，二是grid</description>
    </item>
    
    <item>
      <title>基于ggpubr包为ggplot添加p值和显著性标记</title>
      <link>/cn/post/ggpubr-add-pvalue-and-siglevels/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/ggpubr-add-pvalue-and-siglevels/</guid>
      <description>这篇文章我们将讲述 如何简单比较两组或多组的平均值 如何自动化为ggplot添加p值和显著性标记，包括箱线图、点图、条形图、线图等等 准备 安装和导</description>
    </item>
    
    <item>
      <title>贝叶斯conditioning engines</title>
      <link>/cn/post/2019-11-20-bayesian-condition-engines/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-bayesian-condition-engines/</guid>
      <description>这里描述三种贝叶斯contioning engines： 网格逼近 二次逼近 马尔科夫链蒙特卡罗（MCMC） 网格逼近 网格逼近是最简单的一种，只适用于</description>
    </item>
    
    <item>
      <title>R应用数值计算</title>
      <link>/cn/post/2019-11-20-r-apply-math-computation/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-apply-math-computation/</guid>
      <description>这里我们学习下有关数值计算的根查找与微积分的内置函数。 根查找 假设我们想要求解以下方程的根： \[ x^2 + x - 2 = 0 \] 若是要手动求解，我们需要先将方程</description>
    </item>
    
    <item>
      <title>识别R对象的类和类型</title>
      <link>/cn/post/2019-11-20-r-class-and-type/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-class-and-type/</guid>
      <description>除了使用is.*()函数，我们也可以使用class()或typeof()函数来实现类型的识别。 接下来用例子展示class()和typeof(</description>
    </item>
    
    <item>
      <title>R使用switch语句</title>
      <link>/cn/post/2019-11-20-r-switch/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-switch/</guid>
      <description>与常用处理TRUE和FALSE条件的if相比，switch语句主要用于处理数字或者字符串，并根据输入返回某个分支。 假设输入一个整数n，swi</description>
    </item>
    
    <item>
      <title>修改全局选项</title>
      <link>/cn/post/2019-11-20-r-global-options/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-global-options/</guid>
      <description>R语言的选项设定可以从全局范围影响当前的会话，我们调用getOption()查看选项值，使用options()修改它。 一个常用的设定选项是输</description>
    </item>
    
    <item>
      <title>R提取向量元素[与[[区分</title>
      <link>/cn/post/2019-11-20-r-subset-vector-notes/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-r-subset-vector-notes/</guid>
      <description>内容取自《R语言编程指南》。 []能够创建一个向量子集，[[]]可以提取向量中的元素。我们可以将一个向量比作10盒糖果，使用[]可以获取其中的</description>
    </item>
    
    <item>
      <title>使用 R 进行生存分析</title>
      <link>/cn/post/r-survival/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/r-survival/</guid>
      <description>学习生存分析预先要求对R有所了解，基本能够操作R数据框和包的使用。要是懂ggplot2和dplyr就更好了。 资料 生存分析备查表 - 会使用到的主</description>
    </item>
    
    <item>
      <title>使用R tidyverse 进行探索性分析EDA</title>
      <link>/cn/post/2019-11-06-eda-with-tidyverse/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-06-eda-with-tidyverse/</guid>
      <description>该部分学习内容来自《R for Data Science》。 这次我们学习可视化与处理数据来系统地探索数据——统计学家称之为探索性数据分析（explorato</description>
    </item>
    
    <item>
      <title>使用yyplot绘制pubmed研究趋势</title>
      <link>/cn/post/2019-11-20-access-pubmed-by-yyplot/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-20-access-pubmed-by-yyplot/</guid>
      <description>在准备转博报告的过程中觉得有必要给一些研究添加Pubmed研究趋势，这个功能Y叔在它的公众号推过，所以我记了一下，之前在写开题报告的时候就用</description>
    </item>
    
    <item>
      <title>使用dplyr进行数据处理</title>
      <link>/cn/post/2019-11-06-data-processing-with-dplyr/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2019-11-06-data-processing-with-dplyr/</guid>
      <description>该部分学习内容来自《R for Data Science》。 在对数据进行可视化之前我们往往需要进行数据转换以得到可视化所需要的数据内容与格式。这里我们使用d</description>
    </item>
    
    <item>
      <title>Bioconductor分析RNA-seq数据</title>
      <link>/cn/post/2017-10-27-rnaseq-data-analysis/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2017-10-27-rnaseq-data-analysis/</guid>
      <description>参考学习《R语言与Bioconductor生物信息学应用》第六章 前言 Y叔的公众号biobabble发过一篇【听说你想学R？】,七月份发的但昨</description>
    </item>
    
    <item>
      <title>Bioconductor分析基因芯片数据</title>
      <link>/cn/post/2017-10-09-microarray-data-analysis/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/post/2017-10-09-microarray-data-analysis/</guid>
      <description>参考学习《R语言与Bioconductor——生物信息学应用》第五章，根据自己学习有删改，欢迎分享。本文中有些预备知识或一些方法的原理没有提</description>
    </item>
    
  </channel>
</rss>